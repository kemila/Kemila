<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<title>ES2015</title>
</head>

<body>
//粗略看了<<实战ES2015>>, 主要实践了书中前两章的新特性,但还是有些不清楚的地方
//书四五章写的 前后台实例只看了实现思路,涉及的vue,MINDB技术不熟,未亲自实践
	<script>
		//	let 块级作用域
		let a = 'bar';
		//	let a = 'ba1r';

		const PI = 3.14;
		//	PI= 5

		const foo = {
			a: 1,
			b: 2
		}
		console.log(foo);
		foo.a = 6
		console.log(foo);

		//freeze 构造一个递归冻结的不可变对象
		Object.deepFreeze = function(obj) {
			var propNames = Object.getOwnPropertyNames(obj);

			propNames.forEach(function(name) {
				var prop = obj[name];
				if (typeof prop == 'object' && prop !== null) {
					Object.deepFreeze(prop);
				}
			})

			return Object.freeze(obj);
		}
		const obj3 = Object.freeze({
			a: {
				b: {
					c: 34
				}
			}
		})
		console.log(obj3);
		obj3.a.b = 666;
		console.log(obj3);

		const obj4 = Object.freeze({
			a: 3
		});
		console.log(obj4);
		obj4.a = 888;
		console.log(obj4);



		//let循环
		const arr = [1, 2, 3];
		for (const item of arr) {
			console.log(item);
		}

		//解构特性
		const Zootopia = [{
			name: "Nick",
			age: "22"
		}, {
			name: "Judy",
			age: "34"
		}];
		for (const {
				name,
				age
			} of Zootopia) {
			console.log(`Hi,I am ${name},and ${age} years old`);
		}
		//entries特性  && 模板字符串 用``
		const arr_entries = ["a", "b", "c"];
		console.log(arr_entries.entries());
		for (const [index, {
				name,
				age
			}] of Zootopia.entries()) {
			console.log(`${index}.Hi,I am ${name},and ${age} years old`);
		}
		//=>函数
		let arr_f = ["22", "67", "34"];
		const squares = arr_f.map(x => x * x);
		console.log(squares);
		//this 会穿透 
		const obj = {
			hellow: "world",
			foo() {
				const bar = () => this.hellow;
				return bar;
			}
		}
		obj.foo()();
		const obj1 = {
			hellow: "world",
			foo() {
				var that = this;
				const bar = function() {
					console.log(this.hellow);
					console.log(that.hellow);
				}
				return bar;
			}
		}
		obj1.foo()();

		//语法糖
		var a_ = {

			b() {
				console.log("更像是一个方法,而不是一个函数为值的属性")
			}
		}
		a_.b();

		//不太懂: _proto_注入  ; 可动态计算的属性名

		//属性名定义省略;
		const foo_ = 123;
		const bar_ = () => foo;
		const obj_ = {
			foo_,
			bar_
		}
		const obj_old = {
			foo_: foo_,
			bar_: bar_
		}

		//多 返回值
		function getdata() {
			return {
				arg1: 1,
				arg2: 2,
				arg3: 3
			}
		}
		//:hhh收别名 重命名
		var {
			arg1: hhh,
			arg2,
			arg3,
			arg4 = 444
		} = getdata();
		console.log("hhh", arg2, arg3, hhh, arg4);

		//...rest 匹配剩下的3 4 5
		var [arg4, arg5, ...rest] = [1, 2, 3, 4, 5];

		//promise 解构
		function fetchData() {
			return new Promise((resolve, reject) => {
				resolve(['foo_p', 'bar_p'])
			})
		}

		fetchData().then(([v1, v2]) => {
			console.log("v1,v2", v1, v2);
		})

		//swap 交换[]
		let arg8 = 8,
			arg9 = 9;
		[arg8, arg9] = [arg9, arg8];

		//深层匹配
		const data_deep = {
			a: "aaaa",
			b: "bbbbb",
			c: [{
				c1: "c1c11111",
				c2: {
					m: "mmmmm1111"
				}
			}, {
				c1: "c1c12222",
				c2: {
					m: "mmmmm2222"
				}
			}]
		}
		const data_d = data_deep.c.map(({
			c1,
			c2: {
				m: image
			}
		}) => ({
			c1,
			image
		}));
		console.log(data_d);
		//map.深层解析数组
		const nfvs_res = {
			"return_code": 0,
			"nfvs": [{
				"id": "2838444-5bec-3345-8cb0-56789000088",
				"tenant_id": "tenant_id123",
				"vpc_id": "123456",
				"nfv_name": "nfv_vfw",
				"nfvgroup_id": "b7ce063e-dee4-49c2-b955-820e5d9ee859",
				"type": "vfw",
				"pool_name": "pool1",
				"session_quantity": 1000,
				"acl_quantity": 1000
			}, {
				"id": "2838444-5bec-3345-8cb0-56789000086",
				"tenant_id": "tenant_id145",
				"vpc_id": "232344",
				"nfv_name": "nfv_vfw2",
				"nfvgroup_id": "b7ce063e-dee4-49c2-b955-820e5d9ee854",
				"type": "vfw",
				"pool_name": "pool123",
				"session_quantity": 232,
				"acl_quantity": 2323
			}],
			"detail": ""
		}

		const nfvs_parse = nfvs_res.nfvs.map(({
			tenant_id: TID,
			nfv_name: NNAME,
			pool_name: PNAME,
		}) => ({
			TID,
			NNAME,
			PNAME
		}));
		console.log(nfvs_parse);
		//默认参数值
		function fn_mr(arg = 'foo') {
			console.log(arg)
		}
		fn_mr();

		function fn_arrfrom() {
			console.log(arguments)
			console.log(Array.from(arguments));
		}
		fn_arrfrom(1, 2, 3, 4, 5, 6);

		//新解构 set map weakset weakmap


		//class类机制 promise不太懂
		class Point1 {
			constructor(x, y) {
				this.x = x;
				this.y = y;
			}
			moveRight(step) {
				console.log("Point1", this);
				return new Promise(resolve => (resolve({
					x: this.x + step,
					y: this.y
				})))
			}
		}
		class Point2 {
			constructor(x, y) {
				this.x = x;
				this.y = y;
			}
			moveRight(step) {
				return new Promise(function(resolve) {
					//this 指向undefined
					console.log("Point2", this);
					resolve({
						x: 2 + step,
						y: 3
					})
				})
			}
		}

		const P1 = new Point1(2, 5);
		P1.moveRight(3).then(({
			x,
			y
		}) => console.log(`(${x},${y})`));
		const P2 = new Point2(2, 5);
		P2.moveRight(3).then(function(x, y) {
			console.log(x, y);
		});
		//继承 extend 不必关系内部构造器原型炼 注重语法


		//getter setter 元编程概念

		class Point {
			constructor(x, y) {
				this.x = x;
				this.y = y;
			}
			get d() {
				return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2))
			}
		}
		const p = new Point(3, 4);
		console.log("Point 3 4 勾股", p.d)

		//Node树类 
		class Node {
			constructor(parent = null) {
				this._parent = parent;
				this._children = new Set();
				if (this.isRoot) {
					Node.addRoot(this);
				}
			}
			get isRoot() {
				return !this._parent;
			}
			createChild() {
				const node = new Node(this);
				this._children.add(node);
				return node;
			}

			removeFromParent() {
				this._parent = null;
				this._parent._children.delete(this);
			}
			//因为是get  调用.size其实就是调用方法 而不是size属性值 在函数中打印 发现打印次数和树的大小是吻合的
			get size() {
				//				console.log("get size()!!!");
				let size = 0;
				for (const node of this._children) {
					//这边的node.size其实是递归  因为node.size定义的是get方法
					size += node.size;
				}
				size = size ? size + 1 : 1;
				return size;
			}
			static addRoot(root) {
				Node.roots = !Node.roots ? [root] : Node.roots.concat([root]);
			}
			static get size() {
				return Node.roots.map(root => root.size).reduce((a, b) => a + b);
			}
		}

		const root0 = new Node();
		var r1 = root0.createChild();
		var r2 = root0.createChild();
		r2.createChild();
		r2.createChild();

		console.log("root0", root0.size);
		console.log("r1", r1.size);
		console.log("r2", r2.size);
		console.log("Node", Node.size);

		//toString 方法
		class Foo {
			get[Symbol.toStringTag]() {
				return 'zhengqi'
			}
		}
		const obj22 = new Foo();
		console.log(obj22.toString());

		//生成器 瑞士卷的切片
		function* genFn() {
			let a = 2;
			yield a
			while (true) {
				yield a = a / (2 * a + 1);
			}
		}
		const gen = genFn();
		for (const a of gen) {
			if (a < 1 / 100) break;
			//			console.log(a);
		}
		//用已知生成器的constructor 属性 instanceof 检测是否为生成器
		function isGeneratorFunction(fn) {
			return fn[Symbol && Symbol.toStringTag ? Symbol.toStringTag : false] === 'GeneratorFunction';
		}
		console.log("isGeneratorFunction", isGeneratorFunction(genFn));
		//生成器实例必有@@toStringTag属性, 返回值为("[object Generator]")
		console.log(gen.toString());
		//生成器可以消除回调地狱,不太理解

		//promise  

		//symbol 值类型 不重复
		const s1 = Symbol("1234");
		const s2 = Symbol("1234");
		console.log("Symbol", s2 === s1, s1, s2);
		//symbol.for()可以注册一个Symbol
		const s3 = Symbol.for("1234");
		const s4 = Symbol.for("1234");
		console.log("Symbol.for", s3 === s4, s3, s4);
		console.log("Symbol.keyFor", Symbol.keyFor(s4));

		//ES2015迭代for-of
		//		for(const el of [1,2,3])console.log(el);
		//		for(const el of "hellow world")console.log(el);
		//		for(const el of new Uint8Array([0x00,0xff]))console.log(el);
		//		for(const el of new Map([['a',2],['*',{b:3}]]))console.log(el);
		//		for(const el of new Set([1,2,3,4,5,6]))console.log(el);
		//		function* fn(){yield 2;yield 5}
		//		for(const el of fn())console.log(el);

		//Symbol.iterator  支持for-of 具体用法不清  个人认为是让我们自行定义迭代过程  done value

		//Symbol.hasInstance 扩展instanceof 内部逻辑权限
		class instance_foo {
			static[Symbol.hasInstance](obj) {
				console.log(obj);
				return true;
			}
		}
		//任意数据  返回都是TRUE instance_foo 例如:
		//		null instanceof instance_foo
		//Symbol.match match 内部逻辑权限
		//定义一个 正则表达 match过程
		var match_re = /dfd/
		match_re[Symbol.match] = function(str) {
			const regexg1 = /^[1-5]*$/;
			if (regexg1.test(str)) return "1-5"
			const regexg2 = /^[6-9]*$/;
			if (regexg2.test(str)) return "6-9"
			return false;
		}
		"dfadf".match(match_re);
		//任意数据  返回都是TRUE 

		//Symbol.unscopables with有关 检测

		//Symbol.toPrimitive 控制隐式转换  比较高级 理解为主
		const Ten = {
			[Symbol.toPrimitive](hint) {
				console.log(hint, "lalal");
				switch (hint) {
					case 'number':
						return 0
					case 'string':
						return 'Ten'
					case 'default':
						return true
				}
			}
		}
		//控制力更强的Proxy 可改变很多对象的行为
		//has get set deleteProperty ownKeys apply construct getPrototypeof set PrototypeOf isExtensible preventExtensions getOwnPropertyDescpritor defineProperty
	</script>
</body>

</html>
