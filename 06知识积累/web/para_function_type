<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<title>变量和方法类型归纳</title>
</head>

<body>
	<script>
		//变量-属性

		//111		私有属性
		(function() {
			var a = "私有属性"
		})();
		//		外部无法访问



		//222		实例属性
		var a = function() {
			this.x = "实例属性";
		}
		//每个实例有一份 互不影响




		//3333原型属性
		a.prototype.y = "原型属性";
		a.prototype.x = "原型属性";

		//优先访问实例属性,若没有实例属性 就会访问原型属性 原型属性





		//444 类属性
		a.x = "类属性"
		var t = new a();
		//		alert(t.x); //undefined  
		//		只有类才能访问,实例不能访问


		//综合实例
		var a = function() {
			var x = 'a'; //内部属性、私有属性  
			this.z = 'c'; //实例属性  
		}
		a.y = 'b'; //类属性  
		a.prototype.m = 'd'; //原型属性  

		var t1 = new a();
		var t2 = new a();
		console.log(t1.x); //undefined  
		console.log(t2.x); //undefined  
		console.log(t1.y); //undefined  
		console.log(t2.y); //undefined  
		console.log(t1.z); //c  
		console.log(t2.z); //c  
		console.log(t1.m); //d  
		console.log(t2.m); //d  
		console.log(a.x); //undefined  
		console.log(a.y); //b  
		console.log(a.z); //undefined  
		console.log(a.m); //undefined



		//方法 function
		//静态方法
		var BaseClass = function() {}; // var BaseClass=new Function();    
		BaseClass.f1 = function() { //定义静态方法    
			alert(' This is a static method ');
		}
		BaseClass.f1(); //This is a static method    
		var instance1 = new BaseClass();
		instance1.f1(); //instance1.f1 is not a function 
		//实例方法
		var BaseClass = function() {
			this.method1 = function() {
				alert(' Defined by the "this" in the instance method');
			}
		};
		var instance1 = new BaseClass();
		instance1.method1 = function() {
			alert(' Defined directly in the instance method');
		}
		BaseClass.prototype.method1 = function() {
			alert(' Defined by the prototype instance method ');
		}
		instance1.method1(); //Defined directly in the instance method

		
		//私有方法
		var BaseClass = function() {
			var method1 = function() {
				alert("Internal method");
			};
			var method2 = function() {
				alert("call Internal method");
				method1();
			};
			this.method3 = function() {
				method2();
			}
		};
		var instance1 = new BaseClass();
		instance1.method1(); // 会报错，因为method1是BaseClass中定义的内部变量，作用域只有在内部可见（闭包）    
		instance1.method3(); //会先后调用method2和method1
	</script>
</body>

</html>
